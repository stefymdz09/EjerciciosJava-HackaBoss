package com.JavaBasico.Semana2.Dia8;

import java.util.ArrayList;

public class Main {
	public static void main(String[] args) {
		
		a) Crear 10 objetos de tipo Producto con sus correspondientes valores cargados (por ejemplo, teléfono, laptop, auriculares/cascos, cargador, tablet, etc).

	b) Guardar estos objetos creados en un ArrayList.

	c) Recorrer el ArrayList y determinar el producto con el mayor precio de venta.

	d) Recorrer el ArrayList y determinar el producto con el menor precio de costo.

	e) Borrar el producto que se encuentre en la posición 5 del ArrayList.

	f) Determinar el producto que tenga la mayor cantidad en stock. A ese producto, descontarle 3 unidades del stock y actualizar el registro en la lista en base a eso.

	g) Mostrar siempre por consola un mensaje informativo luego de resolver cada punto.
	//b) Guardar estos objetos creados en un ArrayList.
        ArrayList<Producto> productos = new ArrayList<>();

       //a) Crear 10 objetos de tipo Producto con sus correspondientes valores cargados
	   //(por ejemplo, teléfono, laptop, auriculares/cascos, cargador, tablet, etc).
	

        productos.add(new Producto(1, "Movil", "Apple", "Smartphone", 300, 450, 20));
        productos.add(new Producto(2, "Auriculares", "HP", "Bluetooth", 600, 900, 10));
        productos.add(new Producto(3, "Ordenador", "Sony", "Accesorio", 40, 70, 50));
        productos.add(new Producto(4, "Tablet", "Apple", "iPad", 15, 25, 30));
        productos.add(new Producto(5, "Cargador", "Huawey", "Accesorio", 50, 40, 50));
        productos.add(new Producto(6, "Tablet", "HP", "Portatil", 80, 130, 12));
        productos.add(new Producto(7, "Telefono", "Samsung", "Smartphone", 80, 80, 67));
        productos.add(new Producto(8, "Teclado", "Logitech", "Gaming", 90, 150, 22));
        productos.add(new Producto(9, "Televisor", "Samsung", "Accesorio", 60, 50, 35));
        productos.add(new Producto(10, "Impresora", "LG", "Accesorio", 40, 70, 28));

  

        
    ////////////////////////////////////
       
        // c) Recorrer el ArrayList y determinar el producto con el mayor precio de venta
        double maxPrecioVenta = productos.get(0);
        
        for (Producto producto : productos) {
            if (producto.getPrecioVenta() > maxPrecioVenta.getPrecioVenta()) {
               maxPrecioVenta = producto;
                
                //maxPrecioVenta = producto.getPrecioVenta();
               // productoMaxPrecioVenta = producto;
            }
        }
        System.out.println("Producto con mayor precio de venta es: " + maxPrecioVenta);

        // d) Recorrer el ArrayList y determinar el producto con el menor precio de costo
        Producto minPrecioCosto = productos.get(0);
        for (Producto producto : productos) {
            if (producto.getPrecioCosto() < minPrecioCosto.getPrecioCosto()) {
                minPrecioCosto = producto;
            }
        }
        System.out.println("Producto con menor precio de costo: " + minPrecioCosto);

        // e) Borrar el producto en la posición 5 del ArrayList
        if (productos.size() > 5) {
            productos.remove(4);
            System.out.println("Se ha eliminado el producto de la posición 5");
            
      
        } else {
            System.out.println("No hay suficientes productos en la ñlista para eliminar el de la posición 5.");
        }

        // f) Determinar el producto con mayor cantidad en stock, descontarle 3 unidades y actualizar la lista
        Producto maxStock = productos.get(0);
        for (Producto producto : productos) {
            if (producto.getCantidadEnStock() > maxStock.getCantidadEnStock()) {
                maxStock = producto;
            }
        }
        System.out.println("Producto con mayor cantidad en stock antes de la actualización: " + maxStock);

        if (maxStock.getCantidadEnStock() >= 3) {
            maxStock.setCantidadEnStock(maxStock.getCantidadEnStock() - 3);
            System.out.println("Se han descontado 3 unidades del stock al producto con mayor cantidad.");
            System.out.println("Actualización del producto con mayor cantidad en stock: " + maxStock);
            
            System.out.println("\nEl producto con la mayor cantidad en stock es: " + productoMaxStock.getNombre());
            System.out.println("Se han descontado 3 unidades del stock.");
        } else {
            System.out.println("No hay suficientes unidades en stock para descontar al producto con mayor cantidad.");
        }
    }
}

}
